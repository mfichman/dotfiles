#!/usr/bin/env ruby

require 'optparse'
require 'json'
require 'fileutils'
#require 'byebug'

def system(command, exception: true, silent: false)
  $stdout.puts(command) unless silent
  super(command, exception: exception)
end

def user
  user = ENV.fetch('GIT_STACK_USER', ENV.fetch('USER'))
end

def git_stack_branches(branch)
  JSON.parse(File.read("#{ENV['HOME']}/.git-stack/branches/#{branch}.json")) rescue []
end

def git_stack_sync_commit(commit, branches)
  targets = `git notes show #{commit} 2> /dev/null`.strip.split(',')

  return unless $?.success?

  targets.each do |target|
    if branches.include?(target)
      system("git checkout -q #{target}", exception: true)
    else
      system("git checkout -q @{u} -fB #{target}", exception: true)
      branches << target
    end

    system("git cherry-pick #{commit}", exception: true)
  end
end

def git_stack_sync
  commits = `git log --pretty=format:"%h" @{u}..`
  branch = `git rev-parse --abbrev-ref HEAD`.strip

  puts "Sync branch #{branch}? (Y/N)"
  return if STDIN.gets.strip.upcase != 'Y'

  system("git stash push -q", exception: true)

  branches = []

  commits.split(/\s+/).reverse.each do |commit|
    git_stack_sync_commit(commit, branches)
  end

  branches += git_stack_branches(branch)

  system("git checkout -q #{branch}", exception: true)

  branches = branches.uniq

  FileUtils.mkdir_p(File.dirname("#{ENV['HOME']}/.git-stack/branches/#{branch}.json"))
  File.write("#{ENV['HOME']}/.git-stack/branches/#{branch}.json", branches.to_json)
end

def git_stack_rebase
  branch = `git rev-parse --abbrev-ref HEAD`.strip

  puts "Rebase branch #{branch}? (Y/N)"
  return if STDIN.gets.strip.upcase != 'Y'

  system("git stash push -q", exception: true)
  system("git rebase -i @{u} --autosquash", exception: true)
end

def git_stack_push_branch(branch)
  diff = `git diff origin/#{branch}..#{branch} 2> /dev/null`

  if $?.success? && diff.empty?
    puts "No changes for #{branch}"
  else
    system("git push -fu origin #{branch}", exception: true)
  end
end

def git_stack_push
  commits = `git log --pretty=format:"%h" @{u}..`

  branches = commits.split(/\s+/).flat_map do |commit|
    `git notes show #{commit} 2> /dev/null`.strip.split(',')
  end

  branches.uniq.each do |branch|
    git_stack_push_branch(branch) if branch != ''
  end
end

def git_stack_clean
  commits = `git log --pretty=format:"%h" @{u}..`
  branch = `git rev-parse --abbrev-ref HEAD`.strip

  stored_branches = git_stack_branches(branch)

  branches = stored_branches.select do |branch|
    `git rev-parse --verify #{branch} 2> /dev/null`
    $?.success?
  end

  branches -= commits.split(/\s+/).reverse.flat_map do |commit|
    `git notes show #{commit} 2> /dev/null`.strip.split(',')
  end

  branches = branches.uniq

  return if branches.empty?

  puts branches.join("\n")
  puts
  puts "Delete these branches? (Y/N)"

  return if STDIN.gets.strip.upcase != 'Y'

  puts

  branches.each do |branch|
    system("git branch -D #{branch}", exception: true, silent: true)
  end

  File.write("#{ENV['HOME']}/.git-stack-branches", (stored_branches - branches).to_json)
end

def git_stack_log
  format = '%C(brightcyan)%h %C(brightblue)%as%C(bold)% N%C(reset) %s %C(magenta)(%al)%d' 
  system("git log --date=relative --color=always -z --pretty=format:'#{format}' @{u}.. | tr -d '\n' | tr '\\0' '\n' | less -REXS", silent: true)
end

def main
  command = ARGV.shift

  case command
  when 'sync'
    git_stack_sync
  when 'rebase'
    git_stack_rebase
  when 'push'
    git_stack_push
  when 'clean'
    git_stack_clean
  when 'log'
    git_stack_log
  else
    raise ArgumentError, "usage: git stack sync|rebase|push"
  end
rescue => e
  $stderr.puts("git: #{e.message}")
end

main
