#!/usr/bin/env ruby

require 'optparse'
require 'json'
#require 'byebug'

def system(command, exception: true, silent: false)
  $stdout.puts(command) unless silent
  super(command, exception: exception)
  $stdout.puts unless silent
end

def user
  user = ENV.fetch('GIT_STACK_USER', ENV.fetch('USER'))
end

def upstream
  upstream = ARGV[0]
  raise ArgumentError, "missing argument: upstream" unless upstream
  upstream
end

def git_stack_sync_commit(commit, branches)
  main = `git branch --show-current`
  branch = `git notes show #{commit} 2> /dev/null`.strip

  return unless $?.success?

  if branches.include?(branch)
    system("git checkout #{branch}", exception: true)
  else
    system("git checkout #{upstream} -fB #{branch}", exception: true)
    branches << branch
  end

  system("git cherry-pick #{commit}", exception: true)
  system("git checkout #{main}", exception: true)
end

def git_stack_sync
  commits = `git log --pretty=format:"%h" #{upstream}..#{user}/main`

  system("git stash", exception: true)
  system("git checkout #{user}/main", exception: true)

  branches = []

  commits.split(/\s+/).reverse.each do |commit|
    git_stack_sync_commit(commit, branches)
  end

  File.write("#{ENV['HOME']}/.git-stack-branches", branches.to_json)
end

def git_stack_rebase
  system("git fetch #{upstream.split('/').join(' ')}", exception: true)
  system("git rebase -i #{upstream} --autosquash", exception: true)
end

def git_stack_push_commit(commit)
  branch = `git notes show #{commit} 2> /dev/null`

  if $?.success?
    system("git push -fu origin #{branch}", exception: true)
  end
end

def git_stack_push
  commits = `git log --pretty=format:"%h" origin/master..#{user}/main`

  commits.split(/\s+/).each do |commit|
    git_stack_push_commit(commit)
  end
end

def git_stack_clean
  commits = `git log --pretty=format:"%h" #{upstream}..#{user}/main`

  branches = File.open("#{ENV['HOME']}/.git-stack-branches") do |fd|
    JSON.load(fd)
  end

  branches.select! do |branch|
    `git rev-parse --verify #{branch} 2> /dev/null`
    $?.success?
  end

  branches -= commits.split(/\s+/).reverse.map do |commit|
    `git notes show #{commit} 2> /dev/null`.strip
  end

  return if branches.empty?

  puts branches.join("\n")
  puts
  puts "Delete these branches? (Y/N)"

  return if STDIN.gets.strip.upcase != 'Y'

  puts

  branches.each do |branch|
    system("git branch -D #{branch}", exception: true, silent: true)
  end
end

def main
  command = ARGV.shift

  case command
  when 'sync'
    git_stack_sync
  when 'rebase'
    git_stack_rebase
  when 'push'
    git_stack_push
  when 'clean'
    git_stack_clean
  else
    raise ArgumentError, "usage: git stack sync|rebase|push"
  end
rescue => e
  $stderr.puts("git: #{e.message}")
end

main

